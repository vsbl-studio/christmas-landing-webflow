{
  "version": 3,
  "sources": ["../../node_modules/lenis/src/maths.js", "../../node_modules/src/animate.ts", "../../node_modules/src/dimensions.ts", "../../node_modules/lenis/src/debounce.js", "../../node_modules/src/emitter.ts", "../../node_modules/src/virtual-scroll.ts", "../../node_modules/src/index.ts", "../../node_modules/locomotive-scroll/core/IO.ts", "../../node_modules/locomotive-scroll/utils/maths.ts", "../../node_modules/locomotive-scroll/core/ScrollElement.ts", "../../node_modules/locomotive-scroll/core/Core.ts", "../../node_modules/locomotive-scroll/core/RO.ts", "../../node_modules/locomotive-scroll/index.ts", "../../src/scripts/modules/smoothScroll.js", "../../src/scripts/index.js"],
  "sourcesContent": ["// Clamp a value between a minimum and maximum value\r\nexport function clamp(min, input, max) {\r\n  return Math.max(min, Math.min(input, max))\r\n}\r\n\r\n// Truncate a floating-point number to a specified number of decimal places\r\nexport function truncate(value, decimals = 0) {\r\n  return parseFloat(value.toFixed(decimals))\r\n}\r\n\r\n// Linearly interpolate between two values using an amount (0 <= t <= 1)\r\nexport function lerp(x, y, t) {\r\n  return (1 - t) * x + t * y\r\n}\r\n\r\n// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\r\nexport function damp(x, y, lambda, dt) {\r\n  return lerp(x, y, 1 - Math.exp(-lambda * dt))\r\n}\r\n\r\n// Calculate the modulo of the dividend and divisor while keeping the result within the same sign as the divisor\r\n// https://anguscroll.com/just/just-modulo\r\nexport function modulo(n, d) {\r\n  return ((n % d) + d) % d\r\n}\r\n", "import { clamp, damp } from './maths'\r\n\r\n// Animate class to handle value animations with lerping or easing\r\nexport class Animate {\r\n  isRunning: boolean = false\r\n  value: number = 0\r\n  from: number = 0\r\n  to: number = 0\r\n  lerp?: number\r\n  duration?: number = 0\r\n  easing?: Function\r\n  currentTime: number = 0\r\n  onUpdate?: Function\r\n\r\n  // Advance the animation by the given delta time\r\n  advance(deltaTime: number) {\r\n    if (!this.isRunning) return\r\n\r\n    let completed = false\r\n\r\n    if (this.duration && this.easing) {\r\n      this.currentTime += deltaTime\r\n      const linearProgress = clamp(0, this.currentTime / this.duration, 1)\r\n\r\n      completed = linearProgress >= 1\r\n      const easedProgress = completed ? 1 : this.easing(linearProgress)\r\n      this.value = this.from + (this.to - this.from) * easedProgress\r\n    } else if (this.lerp) {\r\n      this.value = damp(this.value, this.to, this.lerp * 60, deltaTime)\r\n      if (Math.round(this.value) === this.to) {\r\n        this.value = this.to\r\n        completed = true\r\n      }\r\n    } else {\r\n      // If no easing or lerp, just jump to the end value\r\n      this.value = this.to\r\n      completed = true\r\n    }\r\n\r\n    if (completed) {\r\n      this.stop()\r\n    }\r\n\r\n    // Call the onUpdate callback with the current value and completed status\r\n    this.onUpdate?.(this.value, completed)\r\n  }\r\n\r\n  // Stop the animation\r\n  stop() {\r\n    this.isRunning = false\r\n  }\r\n\r\n  // Set up the animation from a starting value to an ending value\r\n  // with optional parameters for lerping, duration, easing, and onUpdate callback\r\n  fromTo(\r\n    from: number,\r\n    to: number,\r\n    {\r\n      lerp,\r\n      duration,\r\n      easing,\r\n      onStart,\r\n      onUpdate,\r\n    }: {\r\n      lerp?: number\r\n      duration?: number\r\n      easing?: Function\r\n      onStart?: Function\r\n      onUpdate?: Function\r\n    }\r\n  ) {\r\n    this.from = this.value = from\r\n    this.to = to\r\n    this.lerp = lerp\r\n    this.duration = duration\r\n    this.easing = easing\r\n    this.currentTime = 0\r\n    this.isRunning = true\r\n\r\n    onStart?.()\r\n    this.onUpdate = onUpdate\r\n  }\r\n}\r\n", "import { debounce } from './debounce'\r\n\r\ntype DimensionsOptions = {\r\n  wrapper: Window | HTMLElement\r\n  content: HTMLElement\r\n  autoResize?: boolean\r\n  debounce?: number\r\n}\r\n\r\nexport class Dimensions {\r\n  wrapper: Window | HTMLElement\r\n  content: HTMLElement\r\n  width: number = 0\r\n  height: number = 0\r\n  scrollWidth: number = 0\r\n  scrollHeight: number = 0\r\n  debouncedResize?: Function\r\n  wrapperResizeObserver?: ResizeObserver\r\n  contentResizeObserver?: ResizeObserver\r\n\r\n  // @ts-ignore\r\n  constructor({\r\n    wrapper,\r\n    content,\r\n    autoResize = true,\r\n    debounce: debounceValue = 250,\r\n  }: DimensionsOptions = {}) {\r\n    this.wrapper = wrapper\r\n    this.content = content\r\n\r\n    if (autoResize) {\r\n      this.debouncedResize = debounce(this.resize, debounceValue)\r\n\r\n      if (this.wrapper === window) {\r\n        window.addEventListener(\r\n          'resize',\r\n          this.debouncedResize as EventListener,\r\n          false\r\n        )\r\n      } else {\r\n        this.wrapperResizeObserver = new ResizeObserver(\r\n          this.debouncedResize as ResizeObserverCallback\r\n        )\r\n        this.wrapperResizeObserver.observe(this.wrapper as HTMLElement)\r\n      }\r\n\r\n      this.contentResizeObserver = new ResizeObserver(\r\n        this.debouncedResize as ResizeObserverCallback\r\n      )\r\n      this.contentResizeObserver.observe(this.content)\r\n    }\r\n\r\n    this.resize()\r\n  }\r\n\r\n  destroy() {\r\n    this.wrapperResizeObserver?.disconnect()\r\n    this.contentResizeObserver?.disconnect()\r\n    window.removeEventListener(\r\n      'resize',\r\n      this.debouncedResize as EventListener,\r\n      false\r\n    )\r\n  }\r\n\r\n  resize = () => {\r\n    this.onWrapperResize()\r\n    this.onContentResize()\r\n  }\r\n\r\n  onWrapperResize = () => {\r\n    if (this.wrapper === window) {\r\n      this.width = window.innerWidth\r\n      this.height = window.innerHeight\r\n    } else if (this.wrapper instanceof HTMLElement) {\r\n      this.width = this.wrapper.clientWidth\r\n      this.height = this.wrapper.clientHeight\r\n    }\r\n  }\r\n\r\n  onContentResize = () => {\r\n    if (this.wrapper === window) {\r\n      this.scrollHeight = this.content.scrollHeight\r\n      this.scrollWidth = this.content.scrollWidth\r\n    } else if (this.wrapper instanceof HTMLElement) {\r\n      this.scrollHeight = this.wrapper.scrollHeight\r\n      this.scrollWidth = this.wrapper.scrollWidth\r\n    }\r\n  }\r\n\r\n  get limit(): {\r\n    x: number\r\n    y: number\r\n  } {\r\n    return {\r\n      x: this.scrollWidth - this.width,\r\n      y: this.scrollHeight - this.height,\r\n    }\r\n  }\r\n}\r\n", "export function debounce(callback, delay) {\r\n  let timer\r\n  return function () {\r\n    let args = arguments\r\n    let context = this\r\n    clearTimeout(timer)\r\n    timer = setTimeout(function () {\r\n      callback.apply(context, args)\r\n    }, delay)\r\n  }\r\n}\r\n", "export class Emitter {\r\n  events: Record<string, Function[]>\r\n\r\n  constructor() {\r\n    this.events = {}\r\n  }\r\n\r\n  emit(event: string, ...args: any[]) {\r\n    let callbacks = this.events[event] || []\r\n    for (let i = 0, length = callbacks.length; i < length; i++) {\r\n      callbacks[i](...args)\r\n    }\r\n  }\r\n\r\n  on(event: string, callback: Function) {\r\n    // Add the callback to the event's callback list, or create a new list with the callback\r\n    this.events[event]?.push(callback) || (this.events[event] = [callback])\r\n\r\n    // Return an unsubscribe function\r\n    return () => {\r\n      this.events[event] = this.events[event]?.filter((i) => callback !== i)\r\n    }\r\n  }\r\n\r\n  off(event: string, callback: Function) {\r\n    this.events[event] = this.events[event]?.filter((i) => callback !== i)\r\n  }\r\n\r\n  destroy() {\r\n    this.events = {}\r\n  }\r\n}\r\n", "import { Emitter } from './emitter'\r\n\r\nconst LINE_HEIGHT = 100 / 6\r\n\r\nexport class VirtualScroll {\r\n  element: HTMLElement | Window\r\n  wheelMultiplier: number\r\n  touchMultiplier: number\r\n  touchStart: {\r\n    x: number | null\r\n    y: number | null\r\n  }\r\n  emitter: Emitter\r\n  lastDelta: {\r\n    x: number\r\n    y: number\r\n  } = {\r\n    x: 0,\r\n    y: 0,\r\n  }\r\n  windowWidth: number = 0\r\n  windowHeight: number = 0\r\n\r\n  constructor(\r\n    element: HTMLElement | Window,\r\n    { wheelMultiplier = 1, touchMultiplier = 1 }\r\n  ) {\r\n    this.element = element\r\n    this.wheelMultiplier = wheelMultiplier\r\n    this.touchMultiplier = touchMultiplier\r\n\r\n    this.touchStart = {\r\n      x: null,\r\n      y: null,\r\n    }\r\n\r\n    this.emitter = new Emitter()\r\n    window.addEventListener('resize', this.onWindowResize, false)\r\n    this.onWindowResize()\r\n\r\n    this.element.addEventListener('wheel', this.onWheel as EventListener, {\r\n      passive: false,\r\n    })\r\n    this.element.addEventListener(\r\n      'touchstart',\r\n      this.onTouchStart as EventListener,\r\n      {\r\n        passive: false,\r\n      }\r\n    )\r\n    this.element.addEventListener(\r\n      'touchmove',\r\n      this.onTouchMove as EventListener,\r\n      {\r\n        passive: false,\r\n      }\r\n    )\r\n    this.element.addEventListener(\r\n      'touchend',\r\n      this.onTouchEnd as EventListener,\r\n      {\r\n        passive: false,\r\n      }\r\n    )\r\n  }\r\n\r\n  // Add an event listener for the given event and callback\r\n  on(event: string, callback: Function) {\r\n    return this.emitter.on(event, callback)\r\n  }\r\n\r\n  // Remove all event listeners and clean up\r\n  destroy() {\r\n    this.emitter.destroy()\r\n\r\n    window.removeEventListener('resize', this.onWindowResize, false)\r\n\r\n    this.element.removeEventListener('wheel', this.onWheel as EventListener)\r\n    this.element.removeEventListener(\r\n      'touchstart',\r\n      this.onTouchStart as EventListener\r\n    )\r\n    this.element.removeEventListener(\r\n      'touchmove',\r\n      this.onTouchMove as EventListener\r\n    )\r\n    this.element.removeEventListener(\r\n      'touchend',\r\n      this.onTouchEnd as EventListener\r\n    )\r\n  }\r\n\r\n  // Event handler for 'touchstart' event\r\n  onTouchStart = (event: TouchEvent) => {\r\n    // @ts-expect-error\r\n    const { clientX, clientY } = event.targetTouches\r\n      ? event.targetTouches[0]\r\n      : event\r\n\r\n    this.touchStart.x = clientX\r\n    this.touchStart.y = clientY\r\n\r\n    this.lastDelta = {\r\n      x: 0,\r\n      y: 0,\r\n    }\r\n\r\n    this.emitter.emit('scroll', {\r\n      deltaX: 0,\r\n      deltaY: 0,\r\n      event,\r\n    })\r\n  }\r\n\r\n  // Event handler for 'touchmove' event\r\n  onTouchMove = (event: TouchEvent) => {\r\n    // @ts-expect-error\r\n    const { clientX, clientY } = event.targetTouches\r\n      ? event.targetTouches[0]\r\n      : event\r\n\r\n    const deltaX = -(clientX - (this.touchStart?.x ?? 0)) * this.touchMultiplier\r\n    const deltaY = -(clientY - (this.touchStart?.y ?? 0)) * this.touchMultiplier\r\n\r\n    this.touchStart.x = clientX\r\n    this.touchStart.y = clientY\r\n\r\n    this.lastDelta = {\r\n      x: deltaX,\r\n      y: deltaY,\r\n    }\r\n\r\n    this.emitter.emit('scroll', {\r\n      deltaX,\r\n      deltaY,\r\n      event,\r\n    })\r\n  }\r\n\r\n  onTouchEnd = (event: TouchEvent) => {\r\n    this.emitter.emit('scroll', {\r\n      deltaX: this.lastDelta.x,\r\n      deltaY: this.lastDelta.y,\r\n      event,\r\n    })\r\n  }\r\n\r\n  // Event handler for 'wheel' event\r\n  onWheel = (event: WheelEvent) => {\r\n    let { deltaX, deltaY, deltaMode } = event\r\n\r\n    const multiplierX =\r\n      deltaMode === 1 ? LINE_HEIGHT : deltaMode === 2 ? this.windowWidth : 1\r\n    const multiplierY =\r\n      deltaMode === 1 ? LINE_HEIGHT : deltaMode === 2 ? this.windowHeight : 1\r\n\r\n    deltaX *= multiplierX\r\n    deltaY *= multiplierY\r\n\r\n    deltaX *= this.wheelMultiplier\r\n    deltaY *= this.wheelMultiplier\r\n\r\n    this.emitter.emit('scroll', { deltaX, deltaY, event })\r\n  }\r\n\r\n  onWindowResize = () => {\r\n    this.windowWidth = window.innerWidth\r\n    this.windowHeight = window.innerHeight\r\n  }\r\n}\r\n", "import { version } from '../../../package.json'\r\nimport { Animate } from './animate'\r\nimport { Dimensions } from './dimensions'\r\nimport { Emitter } from './emitter'\r\nimport { clamp, modulo } from './maths'\r\nimport { VirtualScroll } from './virtual-scroll'\r\n\r\n// Technical explanation\r\n// - listen to 'wheel' events\r\n// - prevent 'wheel' event to prevent scroll\r\n// - normalize wheel delta\r\n// - add delta to targetScroll\r\n// - animate scroll to targetScroll (smooth context)\r\n// - if animation is not running, listen to 'scroll' events (native context)\r\n\r\ntype Overwrite<T, R> = Omit<T, keyof R> & R\r\n\r\ntype EasingFunction = (t: number) => number\r\ntype Orientation = 'vertical' | 'horizontal'\r\ntype GestureOrientation = 'vertical' | 'horizontal' | 'both'\r\ntype Scrolling = boolean | 'native' | 'smooth'\r\n\r\ntype onVirtualScrollOptions = {\r\n  deltaX: number\r\n  deltaY: number\r\n  event: WheelEvent | TouchEvent\r\n}\r\n\r\nexport type LenisOptions = Partial<{\r\n  wrapper: Window | HTMLElement\r\n  content: HTMLElement\r\n  wheelEventsTarget: Window | HTMLElement\r\n  eventsTarget: Window | HTMLElement\r\n  smoothWheel: boolean\r\n  syncTouch: boolean\r\n  syncTouchLerp: number\r\n  touchInertiaMultiplier: number\r\n  duration: number\r\n  easing: EasingFunction\r\n  lerp: number\r\n  infinite: boolean\r\n  orientation: Orientation\r\n  gestureOrientation: GestureOrientation\r\n  touchMultiplier: number\r\n  wheelMultiplier: number\r\n  autoResize: boolean\r\n  prevent: (node: Element) => boolean\r\n  virtualScroll: (data: onVirtualScrollOptions) => boolean\r\n  __experimental__naiveDimensions: boolean\r\n}>\r\n\r\nexport default class Lenis {\r\n  // __isSmooth: boolean = false // true if scroll should be animated\r\n  __isScrolling: Scrolling = false // true when scroll is animating\r\n  __isStopped: boolean = false // true if user should not be able to scroll - enable/disable programmatically\r\n  __isLocked: boolean = false // same as isStopped but enabled/disabled when scroll reaches target\r\n  __preventNextNativeScrollEvent?: boolean\r\n  __resetVelocityTimeout?: number\r\n\r\n  isTouching?: boolean\r\n  time: number\r\n  userData: Object = {}\r\n  lastVelocity: number = 0\r\n  velocity: number = 0\r\n  direction: 1 | -1 | 0 = 0\r\n  options: Overwrite<\r\n    LenisOptions,\r\n    {\r\n      wrapper: NonNullable<LenisOptions['wrapper']>\r\n    }\r\n  >\r\n  targetScroll: number\r\n  animatedScroll: number\r\n  animate: Animate\r\n  emitter: Emitter\r\n  dimensions: Dimensions\r\n  virtualScroll: VirtualScroll\r\n\r\n  constructor({\r\n    wrapper = window,\r\n    content = document.documentElement,\r\n    wheelEventsTarget = wrapper, // deprecated\r\n    eventsTarget = wheelEventsTarget,\r\n    smoothWheel = true,\r\n    syncTouch = false,\r\n    syncTouchLerp = 0.075,\r\n    touchInertiaMultiplier = 35,\r\n    duration, // in seconds\r\n    easing = (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),\r\n    lerp = 0.1,\r\n    infinite = false,\r\n    orientation = 'vertical', // vertical, horizontal\r\n    gestureOrientation = 'vertical', // vertical, horizontal, both\r\n    touchMultiplier = 1,\r\n    wheelMultiplier = 1,\r\n    autoResize = true,\r\n    prevent,\r\n    virtualScroll,\r\n    __experimental__naiveDimensions = false,\r\n  }: LenisOptions = {}) {\r\n    // @ts-expect-error\r\n    window.lenisVersion = version\r\n\r\n    // if wrapper is html or body, fallback to window\r\n    if (\r\n      !wrapper ||\r\n      wrapper === document.documentElement ||\r\n      wrapper === document.body\r\n    ) {\r\n      wrapper = window\r\n    }\r\n\r\n    this.options = {\r\n      wrapper,\r\n      content,\r\n      wheelEventsTarget,\r\n      eventsTarget,\r\n      smoothWheel,\r\n      syncTouch,\r\n      syncTouchLerp,\r\n      touchInertiaMultiplier,\r\n      duration,\r\n      easing,\r\n      lerp,\r\n      infinite,\r\n      gestureOrientation,\r\n      orientation,\r\n      touchMultiplier,\r\n      wheelMultiplier,\r\n      autoResize,\r\n      prevent,\r\n      virtualScroll,\r\n      __experimental__naiveDimensions,\r\n    } as LenisOptions\r\n\r\n    this.animate = new Animate()\r\n    this.emitter = new Emitter()\r\n    this.dimensions = new Dimensions({ wrapper, content, autoResize })\r\n    // this.toggleClassName('lenis', true)\r\n    this.updateClassName()\r\n\r\n    this.userData = {}\r\n    this.time = 0\r\n    this.velocity = this.lastVelocity = 0\r\n    this.isLocked = false\r\n    this.isStopped = false\r\n    // this.hasScrolled = false\r\n    // this.isSmooth = syncTouch || smoothWheel\r\n    // this.isSmooth = false\r\n    this.isScrolling = false\r\n    this.targetScroll = this.animatedScroll = this.actualScroll\r\n\r\n    this.options.wrapper.addEventListener('scroll', this.onNativeScroll, false)\r\n\r\n    this.options.wrapper.addEventListener(\r\n      'pointerdown',\r\n      this.onPointerDown as EventListener,\r\n      false\r\n    )\r\n\r\n    this.virtualScroll = new VirtualScroll(eventsTarget, {\r\n      touchMultiplier,\r\n      wheelMultiplier,\r\n    })\r\n    this.virtualScroll.on('scroll', this.onVirtualScroll)\r\n  }\r\n\r\n  destroy() {\r\n    this.emitter.destroy()\r\n\r\n    this.options.wrapper.removeEventListener(\r\n      'scroll',\r\n      this.onNativeScroll,\r\n      false\r\n    )\r\n    this.options.wrapper.removeEventListener(\r\n      'pointerdown',\r\n      this.onPointerDown as EventListener,\r\n      false\r\n    )\r\n\r\n    this.virtualScroll.destroy()\r\n    this.dimensions.destroy()\r\n\r\n    this.cleanUpClassName()\r\n\r\n    // this.rootElement.className = ''\r\n\r\n    // this.toggleClassName('lenis', false)\r\n    // this.toggleClassName('lenis-smooth', false)\r\n    // this.toggleClassName('lenis-scrolling', false)\r\n    // this.toggleClassName('lenis-stopped', false)\r\n    // this.toggleClassName('lenis-locked', false)\r\n  }\r\n\r\n  on(event: string, callback: Function) {\r\n    return this.emitter.on(event, callback)\r\n  }\r\n\r\n  off(event: string, callback: Function) {\r\n    return this.emitter.off(event, callback)\r\n  }\r\n\r\n  private setScroll(scroll: number) {\r\n    // apply scroll value immediately\r\n    if (this.isHorizontal) {\r\n      this.rootElement.scrollLeft = scroll\r\n    } else {\r\n      this.rootElement.scrollTop = scroll\r\n    }\r\n  }\r\n\r\n  private onPointerDown = (event: PointerEvent | MouseEvent) => {\r\n    if (event.button === 1) {\r\n      this.reset()\r\n    }\r\n  }\r\n\r\n  private onVirtualScroll = (data: onVirtualScrollOptions) => {\r\n    if (\r\n      typeof this.options.virtualScroll === 'function' &&\r\n      this.options.virtualScroll(data) === false\r\n    )\r\n      return\r\n\r\n    const { deltaX, deltaY, event } = data\r\n\r\n    this.emitter.emit('virtual-scroll', { deltaX, deltaY, event })\r\n\r\n    // keep zoom feature\r\n    if (event.ctrlKey) return\r\n\r\n    const isTouch = event.type.includes('touch')\r\n    const isWheel = event.type.includes('wheel')\r\n\r\n    this.isTouching = event.type === 'touchstart' || event.type === 'touchmove'\r\n    // if (event.type === 'touchend') {\r\n    //   console.log('touchend', this.scroll)\r\n    //   // this.lastVelocity = this.velocity\r\n    //   // this.velocity = 0\r\n    //   // this.isScrolling = false\r\n    //   this.emit({ type: 'touchend' })\r\n    //   // alert('touchend')\r\n    //   return\r\n    // }\r\n\r\n    const isTapToStop =\r\n      this.options.syncTouch &&\r\n      isTouch &&\r\n      event.type === 'touchstart' &&\r\n      !this.isStopped &&\r\n      !this.isLocked\r\n\r\n    if (isTapToStop) {\r\n      this.reset()\r\n      return\r\n    }\r\n\r\n    const isClick = deltaX === 0 && deltaY === 0 // click event\r\n\r\n    // const isPullToRefresh =\r\n    //   this.options.gestureOrientation === 'vertical' &&\r\n    //   this.scroll === 0 &&\r\n    //   !this.options.infinite &&\r\n    //   deltaY <= 5 // touch pull to refresh, not reliable yet\r\n\r\n    const isUnknownGesture =\r\n      (this.options.gestureOrientation === 'vertical' && deltaY === 0) ||\r\n      (this.options.gestureOrientation === 'horizontal' && deltaX === 0)\r\n\r\n    if (isClick || isUnknownGesture) {\r\n      // console.log('prevent')\r\n      return\r\n    }\r\n\r\n    // catch if scrolling on nested scroll elements\r\n    let composedPath = event.composedPath()\r\n    composedPath = composedPath.slice(0, composedPath.indexOf(this.rootElement)) // remove parents elements\r\n\r\n    const prevent = this.options.prevent\r\n\r\n    if (\r\n      !!composedPath.find(\r\n        (node) =>\r\n          node instanceof Element &&\r\n          ((typeof prevent === 'function' && prevent?.(node)) ||\r\n            node.hasAttribute?.('data-lenis-prevent') ||\r\n            (isTouch && node.hasAttribute?.('data-lenis-prevent-touch')) ||\r\n            (isWheel && node.hasAttribute?.('data-lenis-prevent-wheel')) ||\r\n            (node.classList?.contains('lenis') &&\r\n              !node.classList?.contains('lenis-stopped'))) // nested lenis instance\r\n      )\r\n    )\r\n      return\r\n\r\n    if (this.isStopped || this.isLocked) {\r\n      event.preventDefault() // this will stop forwarding the event to the parent, this is problematic\r\n      return\r\n    }\r\n\r\n    const isSmooth =\r\n      (this.options.syncTouch && isTouch) ||\r\n      (this.options.smoothWheel && isWheel)\r\n\r\n    if (!isSmooth) {\r\n      this.isScrolling = 'native'\r\n      this.animate.stop()\r\n      return\r\n    }\r\n\r\n    event.preventDefault()\r\n\r\n    let delta = deltaY\r\n    if (this.options.gestureOrientation === 'both') {\r\n      delta = Math.abs(deltaY) > Math.abs(deltaX) ? deltaY : deltaX\r\n    } else if (this.options.gestureOrientation === 'horizontal') {\r\n      delta = deltaX\r\n    }\r\n\r\n    const syncTouch = isTouch && this.options.syncTouch\r\n    const isTouchEnd = isTouch && event.type === 'touchend'\r\n\r\n    const hasTouchInertia = isTouchEnd && Math.abs(delta) > 5\r\n\r\n    if (hasTouchInertia) {\r\n      delta = this.velocity * this.options.touchInertiaMultiplier\r\n    }\r\n\r\n    this.scrollTo(this.targetScroll + delta, {\r\n      programmatic: false,\r\n      ...(syncTouch\r\n        ? {\r\n            lerp: hasTouchInertia ? this.options.syncTouchLerp : 1,\r\n          }\r\n        : {\r\n            lerp: this.options.lerp,\r\n            duration: this.options.duration,\r\n            easing: this.options.easing,\r\n          }),\r\n    })\r\n  }\r\n\r\n  resize() {\r\n    this.dimensions.resize()\r\n  }\r\n\r\n  private emit() {\r\n    this.emitter.emit('scroll', this)\r\n  }\r\n\r\n  private onNativeScroll = () => {\r\n    clearTimeout(this.__resetVelocityTimeout)\r\n    delete this.__resetVelocityTimeout\r\n\r\n    if (this.__preventNextNativeScrollEvent) {\r\n      delete this.__preventNextNativeScrollEvent\r\n      return\r\n    }\r\n\r\n    if (this.isScrolling === false || this.isScrolling === 'native') {\r\n      const lastScroll = this.animatedScroll\r\n      this.animatedScroll = this.targetScroll = this.actualScroll\r\n      this.lastVelocity = this.velocity\r\n      this.velocity = this.animatedScroll - lastScroll\r\n      this.direction = Math.sign(\r\n        this.animatedScroll - lastScroll\r\n      ) as Lenis['direction']\r\n      // this.isSmooth = false\r\n      this.isScrolling = 'native'\r\n      this.emit()\r\n\r\n      if (this.velocity !== 0) {\r\n        this.__resetVelocityTimeout = setTimeout(() => {\r\n          this.lastVelocity = this.velocity\r\n          this.velocity = 0\r\n          this.isScrolling = false\r\n          this.emit()\r\n        }, 400)\r\n      }\r\n\r\n      // this.hasScrolled = true\r\n      // }, 50)\r\n    }\r\n  }\r\n\r\n  private reset() {\r\n    this.isLocked = false\r\n    this.isScrolling = false\r\n    this.animatedScroll = this.targetScroll = this.actualScroll\r\n    this.lastVelocity = this.velocity = 0\r\n    this.animate.stop()\r\n  }\r\n\r\n  start() {\r\n    if (!this.isStopped) return\r\n    this.isStopped = false\r\n\r\n    this.reset()\r\n  }\r\n\r\n  stop() {\r\n    if (this.isStopped) return\r\n    this.isStopped = true\r\n    this.animate.stop()\r\n\r\n    this.reset()\r\n  }\r\n\r\n  raf(time: number) {\r\n    const deltaTime = time - (this.time || time)\r\n    this.time = time\r\n\r\n    this.animate.advance(deltaTime * 0.001)\r\n  }\r\n\r\n  scrollTo(\r\n    target: number | string | HTMLElement,\r\n    {\r\n      offset = 0,\r\n      immediate = false,\r\n      lock = false,\r\n      duration = this.options.duration,\r\n      easing = this.options.easing,\r\n      lerp = this.options.lerp,\r\n      onStart,\r\n      onComplete,\r\n      force = false, // scroll even if stopped\r\n      programmatic = true, // called from outside of the class\r\n      userData = {},\r\n    }: {\r\n      offset?: number\r\n      immediate?: boolean\r\n      lock?: boolean\r\n      duration?: number\r\n      easing?: EasingFunction\r\n      lerp?: number\r\n      onStart?: (lenis: Lenis) => void\r\n      onComplete?: (lenis: Lenis) => void\r\n      force?: boolean\r\n      programmatic?: boolean\r\n      userData?: object\r\n    } = {}\r\n  ) {\r\n    if ((this.isStopped || this.isLocked) && !force) return\r\n\r\n    // keywords\r\n    if (\r\n      typeof target === 'string' &&\r\n      ['top', 'left', 'start'].includes(target)\r\n    ) {\r\n      target = 0\r\n    } else if (\r\n      typeof target === 'string' &&\r\n      ['bottom', 'right', 'end'].includes(target)\r\n    ) {\r\n      target = this.limit\r\n    } else {\r\n      let node\r\n\r\n      if (typeof target === 'string') {\r\n        // CSS selector\r\n        node = document.querySelector(target)\r\n      } else if (target instanceof HTMLElement && target?.nodeType) {\r\n        // Node element\r\n        node = target\r\n      }\r\n\r\n      if (node) {\r\n        if (this.options.wrapper !== window) {\r\n          // nested scroll offset correction\r\n          const wrapperRect = this.rootElement.getBoundingClientRect()\r\n          offset -= this.isHorizontal ? wrapperRect.left : wrapperRect.top\r\n        }\r\n\r\n        const rect = node.getBoundingClientRect()\r\n\r\n        target =\r\n          (this.isHorizontal ? rect.left : rect.top) + this.animatedScroll\r\n      }\r\n    }\r\n\r\n    if (typeof target !== 'number') return\r\n\r\n    target += offset\r\n    target = Math.round(target)\r\n\r\n    if (this.options.infinite) {\r\n      if (programmatic) {\r\n        this.targetScroll = this.animatedScroll = this.scroll\r\n      }\r\n    } else {\r\n      target = clamp(0, target, this.limit)\r\n    }\r\n\r\n    if (target === this.targetScroll) return\r\n\r\n    this.userData = userData\r\n\r\n    if (immediate) {\r\n      this.animatedScroll = this.targetScroll = target\r\n      this.setScroll(this.scroll)\r\n      this.reset()\r\n      this.preventNextNativeScrollEvent()\r\n      this.emit()\r\n      onComplete?.(this)\r\n      this.userData = {}\r\n      return\r\n    }\r\n\r\n    if (!programmatic) {\r\n      this.targetScroll = target\r\n    }\r\n\r\n    this.animate.fromTo(this.animatedScroll, target, {\r\n      duration,\r\n      easing,\r\n      lerp,\r\n      onStart: () => {\r\n        // started\r\n        if (lock) this.isLocked = true\r\n        this.isScrolling = 'smooth'\r\n        onStart?.(this)\r\n      },\r\n      onUpdate: (value: number, completed: boolean) => {\r\n        this.isScrolling = 'smooth'\r\n\r\n        // updated\r\n        this.lastVelocity = this.velocity\r\n        this.velocity = value - this.animatedScroll\r\n        this.direction = Math.sign(this.velocity) as Lenis['direction']\r\n\r\n        this.animatedScroll = value\r\n        this.setScroll(this.scroll)\r\n\r\n        if (programmatic) {\r\n          // wheel during programmatic should stop it\r\n          this.targetScroll = value\r\n        }\r\n\r\n        if (!completed) this.emit()\r\n\r\n        if (completed) {\r\n          this.reset()\r\n          this.emit()\r\n          onComplete?.(this)\r\n          this.userData = {}\r\n\r\n          // avoid emitting event twice\r\n          this.preventNextNativeScrollEvent()\r\n        }\r\n      },\r\n    })\r\n  }\r\n\r\n  private preventNextNativeScrollEvent() {\r\n    this.__preventNextNativeScrollEvent = true\r\n\r\n    requestAnimationFrame(() => {\r\n      delete this.__preventNextNativeScrollEvent\r\n    })\r\n  }\r\n\r\n  get rootElement() {\r\n    return (\r\n      this.options.wrapper === window\r\n        ? document.documentElement\r\n        : this.options.wrapper\r\n    ) as HTMLElement\r\n  }\r\n\r\n  get limit() {\r\n    if (this.options.__experimental__naiveDimensions) {\r\n      if (this.isHorizontal) {\r\n        return this.rootElement.scrollWidth - this.rootElement.clientWidth\r\n      } else {\r\n        return this.rootElement.scrollHeight - this.rootElement.clientHeight\r\n      }\r\n    } else {\r\n      return this.dimensions.limit[this.isHorizontal ? 'x' : 'y']\r\n    }\r\n  }\r\n\r\n  get isHorizontal() {\r\n    return this.options.orientation === 'horizontal'\r\n  }\r\n\r\n  get actualScroll(): number {\r\n    // value browser takes into account\r\n    return this.isHorizontal\r\n      ? this.rootElement.scrollLeft\r\n      : this.rootElement.scrollTop\r\n  }\r\n\r\n  get scroll(): number {\r\n    return this.options.infinite\r\n      ? modulo(this.animatedScroll, this.limit)\r\n      : this.animatedScroll\r\n  }\r\n\r\n  get progress(): number {\r\n    // avoid progress to be NaN\r\n    return this.limit === 0 ? 1 : this.scroll / this.limit\r\n  }\r\n\r\n  // get isSmooth() {\r\n  //   return this.__isSmooth\r\n  // }\r\n\r\n  // private set isSmooth(value: boolean) {\r\n  //   if (this.__isSmooth !== value) {\r\n  //     this.__isSmooth = value\r\n  //     this.updateClassName()\r\n  //   }\r\n  // }\r\n\r\n  get isScrolling() {\r\n    return this.__isScrolling\r\n  }\r\n\r\n  private set isScrolling(value: Scrolling) {\r\n    if (this.__isScrolling !== value) {\r\n      this.__isScrolling = value\r\n      this.updateClassName()\r\n    }\r\n  }\r\n\r\n  get isStopped() {\r\n    return this.__isStopped\r\n  }\r\n\r\n  private set isStopped(value: boolean) {\r\n    if (this.__isStopped !== value) {\r\n      this.__isStopped = value\r\n      this.updateClassName()\r\n    }\r\n  }\r\n\r\n  get isLocked() {\r\n    return this.__isLocked\r\n  }\r\n\r\n  private set isLocked(value: boolean) {\r\n    if (this.__isLocked !== value) {\r\n      this.__isLocked = value\r\n      this.updateClassName()\r\n    }\r\n  }\r\n\r\n  get isSmooth() {\r\n    return this.isScrolling === 'smooth'\r\n  }\r\n\r\n  get className() {\r\n    let className = 'lenis'\r\n    if (this.isStopped) className += ' lenis-stopped'\r\n    if (this.isLocked) className += ' lenis-locked'\r\n    if (this.isScrolling) className += ' lenis-scrolling'\r\n    if (this.isScrolling === 'smooth') className += ' lenis-smooth'\r\n    // if (this.isScrolling === 'native') className += ' lenis-native'\r\n    // if (this.isSmooth) className += ' lenis-smooth'\r\n    return className\r\n  }\r\n\r\n  private updateClassName() {\r\n    this.cleanUpClassName()\r\n\r\n    this.rootElement.className =\r\n      `${this.rootElement.className} ${this.className}`.trim()\r\n  }\r\n\r\n  private cleanUpClassName() {\r\n    this.rootElement.className = this.rootElement.className\r\n      .replace(/lenis(-\\w+)?/g, '')\r\n      .trim()\r\n  }\r\n}\r\n", "/**\n * Intersection Observer\n *\n * Detecting visibility of an element in the viewport.\n *\n * Features functions to:\n *\n * - Trigger inview/outOfView callbacks\n * - If the element has a requestAnimationFrame dependency, set interactivy status for the ScrollElement Class\n *\n * References:\n *\n * - {@link https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API}\n */\n\nimport type { IIOOptions } from '../types';\nimport ScrollElement from './ScrollElement';\n\nexport default class IO {\n    public scrollElements: ScrollElement[];\n    private rootMargin: string;\n    private IORaf: boolean;\n    private observer!: IntersectionObserver;\n\n    constructor({\n        scrollElements,\n        rootMargin = '-1px -1px -1px -1px',\n        IORaf,\n    }: IIOOptions) {\n        // Parameters\n        this.scrollElements = scrollElements;\n        this.rootMargin = rootMargin;\n        this.IORaf = IORaf;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize Intersection Observer.\n     *\n     * @private\n     */\n    private _init() {\n        // Options\n        const observerOptions = {\n            rootMargin: this.rootMargin,\n        };\n\n        // Callback\n        const onIntersect = (entries: IntersectionObserverEntry[]) => {\n            entries.forEach((entry) => {\n                const $targetItem: ScrollElement | undefined =\n                    this.scrollElements.find(\n                        (item) => item.$el === entry.target\n                    );\n\n                if (entry.isIntersecting) {\n                    $targetItem && ($targetItem.isAlreadyIntersected = true);\n                    this._setInview(entry);\n                } else if ($targetItem && $targetItem.isAlreadyIntersected) {\n                    this._setOutOfView(entry);\n                }\n            });\n        };\n\n        // Instance\n        this.observer = new IntersectionObserver(onIntersect, observerOptions);\n\n        // Observe each default elements\n        for (const scrollElement of this.scrollElements) {\n            const $scrollElement = scrollElement.$el;\n            this.observe($scrollElement);\n        }\n    }\n\n    /**\n     * Lifecyle - Destroy Intersection Observer.\n     */\n    public destroy() {\n        this.observer.disconnect();\n    }\n\n    /**\n     * Subscribe element to the Intersection Observer.\n     *\n     * @param {HTMLElement} $scrollElement - DOM Element to observe.\n     */\n    public observe($scrollElement: HTMLElement) {\n        if (!$scrollElement) {\n            return;\n        }\n\n        this.observer.observe($scrollElement);\n    }\n\n    /**\n     * Unsubscribe element to the Intersection Observer.\n     *\n     * @param {HTMLElement} $scrollElement - DOM Element to unobserve.\n     */\n    public unobserve($scrollElement: HTMLElement) {\n        if (!$scrollElement) {\n            return;\n        }\n\n        this.observer.unobserve($scrollElement);\n    }\n\n    /**\n     * Find ScrollElementReference instance and trigger inview callbacks.\n     *\n     * @private\n     *\n     * @param {IntersectionObserverEntry} entry - DOM Element to observe.\n     */\n    private _setInview(entry: IntersectionObserverEntry) {\n        const scrollElement = this.scrollElements.find(\n            (scrollElement) => scrollElement.$el === entry.target\n        );\n\n        this.IORaf && scrollElement?.setInteractivityOn();\n        !this.IORaf && scrollElement?.setInview();\n    }\n\n    /**\n     * Find ScrollElementReference instance and trigger out of view callbacks.\n     *\n     * @private\n     *\n     * @param {IntersectionObserverEntry} entry - DOM Element to observe.\n     */\n    private _setOutOfView(entry: IntersectionObserverEntry) {\n        const scrollElement = this.scrollElements.find(\n            (scrollElement) => scrollElement.$el === entry.target\n        );\n\n        this.IORaf && scrollElement?.setInteractivityOff();\n        !this.IORaf && scrollElement?.setOutOfView();\n\n        // Unobserve if element doesn't have repeat attribute\n        if (!scrollElement?.attributes.scrollRepeat && !this.IORaf) {\n            this.unobserve(entry.target as HTMLElement);\n        }\n    }\n}\n", "// https://greensock.com/docs/v3/GSAP/gsap.utils\n\n/**\n * Clamp a value to fit within a specific range (ex: clamp(0, 100, -12) --> 0).\n *\n * @param {number} min   - Minimum value expected.\n * @param {number} max   - Maximum value expected.\n * @param {number} value - Current value.\n *\n * @returns {number} - Clamped value.\n */\nexport function clamp(min: number, max: number, value: number): number {\n    return value < min ? min : value > max ? max : value;\n}\n\n/**\n * Map one range to another (ex: mapRange(-10, 10, 0, 100, 5) --> 75).\n *\n * @param {number} inMin  - Current minimum value.\n * @param {number} inMax  - Current maximum value.\n * @param {number} outMin - Maximum value expected.\n * @param {number} outMax - Maximum value expected.\n * @param {number} value  - Current value.\n *\n * @returns {number} - New value that should be between minimum value expected and maximum value.\n */\nexport function mapRange(\n    inMin: number,\n    inMax: number,\n    outMin: number,\n    outMax: number,\n    value: number\n): number {\n    const inRange = inMax - inMin;\n    const outRange = outMax - outMin;\n    return outMin + (((value - inMin) / inRange) * outRange || 0);\n}\n\n/**\n * Map a number within a range to a progress between 0 to 1 (ex: normalize(100, 200, 150) --> 0.5).\n *\n * @param {number} min   - Current minimum value.\n * @param {number} max   - Current maximum value.\n * @param {number} value - Current value.\n *\n * @returns {number} - New value that should be between 0 and 1.\n */\nexport function normalize(min: number, max: number, value: number): number {\n    return mapRange(min, max, 0, 1, value);\n}\n\n/**\n * Get closest number from an array.\n *\n * @param {number[]} array  - Numbers array.\n * @param {number}   target - Reference value.\n *\n * @returns {number} - Closest number.\n */\nexport function closestNumber(array: number[], target: number): number {\n    return array.reduce((prev, curr) => {\n        return Math.abs(curr - target) < Math.abs(prev - target) ? curr : prev;\n    });\n}\n", "/**\n * Scroll Element\n *\n * Give tools to compute element progress in the viewport and triggers callbacks to animate it.\n *\n * Features functions to:\n *\n * - scrollClass - Add a custom class when the element is intersected by the offset\n * - scrollOffset - Determine offsets to intersect the element\n * - scrollPosition - Determine the element positions to consider an element as intersected.\n * - scrollModuleProgress - Send scroll progress to modular module that have a specific method (PROGRESS_MODULAR_METHOD)\n * - scrollCssProgress - Add a specific css variable (PROGRESS_CSS_VAR) that store the scroll progress\n * - scrollEventProgress - Send scroll progress to custom event listeners.\n * - scrollSpeed - Add a scroll multiplicator to create a parallax effect\n * - scrollRepeat - Repeat the option to trigger animation each time the element is intersected\n * - scrollCall - Call a custom event or a modular callback when the element is intersected\n */\n\nimport type {\n    IModular,\n    IScrollElementOptions,\n    IScrollElementAttributes,\n    IScrollElementIntersection,\n    IScrollElementMetrics,\n    IProgressModularModules,\n    IScrollElementCallbacksValues,\n    scrollCallWay,\n    scrollCallFrom,\n    scrollOrientation,\n} from '../types';\nimport { clamp, closestNumber, normalize, mapRange } from '../utils/maths';\n\n/** Constants */\nconst INVIEW_CLASS = 'is-inview';\nconst PROGRESS_CSS_VAR = '--progress';\nconst PROGRESS_MODULAR_METHOD = 'onScrollProgress';\n\nexport default class ScrollElement {\n    public $el: HTMLElement;\n    public id: number;\n    public needRaf: boolean;\n    public attributes: IScrollElementAttributes;\n    public scrollOrientation: scrollOrientation;\n    public isAlreadyIntersected: boolean;\n\n    private intersection: IScrollElementIntersection;\n    private metrics: IScrollElementMetrics;\n    private currentScroll: number;\n    private translateValue: number;\n    private progress: number;\n    private lastProgress: number | null;\n    private modularInstance?: IModular;\n    private progressModularModules: IProgressModularModules[];\n    private isInview: boolean;\n    private isInteractive: boolean;\n    private isInFold: boolean;\n    private isFirstResize: boolean;\n\n    private subscribeElementUpdateFn: (scrollElement: ScrollElement) => void;\n    private unsubscribeElementUpdateFn: (scrollElement: ScrollElement) => void;\n\n    constructor({\n        $el,\n        id,\n        modularInstance,\n        subscribeElementUpdateFn,\n        unsubscribeElementUpdateFn,\n        needRaf,\n        scrollOrientation,\n    }: IScrollElementOptions) {\n        // Scroll DOM element\n        this.$el = $el;\n        // Unique ID\n        this.id = id;\n        // RAF option\n        this.needRaf = needRaf;\n        // Scroll Direction\n        this.scrollOrientation = scrollOrientation;\n        // Modular.js\n        this.modularInstance = modularInstance;\n        // Parent's callbacks\n        this.subscribeElementUpdateFn = subscribeElementUpdateFn;\n        this.unsubscribeElementUpdateFn = unsubscribeElementUpdateFn;\n\n        // Attributes\n        this.attributes = {\n            scrollClass: this.$el.dataset['scrollClass'] ?? INVIEW_CLASS,\n            scrollOffset: this.$el.dataset['scrollOffset'] ?? '0,0',\n            scrollPosition: this.$el.dataset['scrollPosition'] ?? 'start,end',\n            scrollModuleProgress:\n                this.$el.dataset['scrollModuleProgress'] != null,\n            scrollCssProgress: this.$el.dataset['scrollCssProgress'] != null,\n            scrollEventProgress:\n                this.$el.dataset['scrollEventProgress'] ?? null,\n            scrollSpeed:\n                this.$el.dataset['scrollSpeed'] != null\n                    ? parseFloat(this.$el.dataset['scrollSpeed'])\n                    : null,\n            scrollRepeat: this.$el.dataset['scrollRepeat'] != null,\n            scrollCall: this.$el.dataset['scrollCall'] ?? null,\n            scrollCallSelf: this.$el.dataset['scrollCallSelf'] != null,\n            scrollIgnoreFold: this.$el.dataset['scrollIgnoreFold'] != null,\n            scrollEnableTouchSpeed:\n                this.$el.dataset['scrollEnableTouchSpeed'] != null,\n        };\n\n        // Limits\n        this.intersection = {\n            start: 0,\n            end: 0,\n        };\n\n        // Metrics\n        this.metrics = {\n            offsetStart: 0,\n            offsetEnd: 0,\n            bcr: {} as DOMRect,\n        };\n\n        // Scroll Values\n        this.currentScroll =\n            this.scrollOrientation === 'vertical'\n                ? window.scrollY\n                : window.scrollX;\n\n        // Parallax\n        this.translateValue = 0;\n\n        // Progress\n        this.progress = 0;\n        this.lastProgress = null;\n        this.progressModularModules = [];\n\n        // Inview\n        this.isInview = false;\n        this.isInteractive = false;\n        this.isAlreadyIntersected = false;\n        this.isInFold = false;\n        this.isFirstResize = true;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize progress tracking.\n     *\n     * @private\n     */\n    private _init() {\n        if (!this.needRaf) {\n            return;\n        }\n\n        // Prepare modules progress\n        if (this.modularInstance && this.attributes.scrollModuleProgress) {\n            this._getProgressModularModules();\n        }\n\n        // First resize to compute all values\n        this._resize();\n    }\n\n    /**\n     * Callback - Resize callback\n     */\n    public onResize({ currentScroll }: IScrollElementCallbacksValues) {\n        this.currentScroll = currentScroll;\n        this._resize();\n    }\n\n    /**\n     * Callback - RAF callback\n     */\n    public onRender({ currentScroll, smooth }: IScrollElementCallbacksValues) {\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n        this.currentScroll = currentScroll;\n        this._computeProgress();\n\n        // Parallax\n        if (\n            this.attributes.scrollSpeed &&\n            !isNaN(this.attributes.scrollSpeed)\n        ) {\n            // if touch detected or smooth disabled\n            if (!this.attributes.scrollEnableTouchSpeed && !smooth) {\n                if (this.translateValue) {\n                    this.$el.style.transform = `translate3d(0, 0, 0)`;\n                }\n                this.translateValue = 0;\n\n                // if mousewheel or smooth enabled\n            } else {\n                // Check fold condition\n                if (this.isInFold) {\n                    const progress = Math.max(0, this.progress);\n                    this.translateValue =\n                        progress * wSize * this.attributes.scrollSpeed * -1;\n                } else {\n                    const progress = mapRange(0, 1, -1, 1, this.progress);\n                    this.translateValue =\n                        progress * wSize * this.attributes.scrollSpeed * -1;\n                }\n\n                this.$el.style.transform =\n                    this.scrollOrientation === 'vertical'\n                        ? `translate3d(0, ${this.translateValue}px, 0)`\n                        : `translate3d(${this.translateValue}px, 0, 0)`;\n            }\n        }\n    }\n\n    /**\n     * Inview callback\n     */\n    public setInview() {\n        if (this.isInview) {\n            return;\n        }\n\n        this.isInview = true;\n        this.$el.classList.add(this.attributes.scrollClass);\n\n        const way: scrollCallWay = 'enter';\n        const from: scrollCallFrom = this._getScrollCallFrom();\n        this.attributes.scrollCall && this._dispatchCall(way, from);\n    }\n\n    /**\n     * Out of view callback\n     */\n    public setOutOfView() {\n        if (!(this.isInview && this.attributes.scrollRepeat)) {\n            return;\n        }\n\n        this.isInview = false;\n        this.$el.classList.remove(this.attributes.scrollClass);\n\n        const way: scrollCallWay = 'leave';\n        const from: scrollCallFrom = this._getScrollCallFrom();\n        this.attributes.scrollCall && this._dispatchCall(way, from);\n    }\n\n    /**\n     * Switch interactivity on to subscribe the instance to the RAF\n     * and start calculations.\n     */\n    public setInteractivityOn() {\n        if (this.isInteractive) {\n            return;\n        }\n\n        this.isInteractive = true;\n        this.subscribeElementUpdateFn(this);\n    }\n\n    /**\n     * Switch interactivity off to unsubscribe the instance to the RAF\n     * and stop calculations.\n     */\n    public setInteractivityOff() {\n        if (!this.isInteractive) {\n            return;\n        }\n\n        this.isInteractive = false;\n        this.unsubscribeElementUpdateFn(this);\n\n        // Force progress to progress limit when the element is out\n        this.lastProgress != null &&\n            this._computeProgress(closestNumber([0, 1], this.lastProgress));\n    }\n\n    /**\n     * Resize method that compute the element's values.\n     *\n     * @private\n     */\n    private _resize() {\n        this.metrics.bcr = this.$el.getBoundingClientRect();\n        this._computeMetrics();\n        this._computeIntersection();\n\n        // First resize logic\n        if (this.isFirstResize) {\n            this.isFirstResize = false;\n            // Dispatch default call if the element is in fold.\n            if (this.isInFold) {\n                this.setInview();\n            }\n        }\n    }\n\n    /**\n     * Compute element's offsets and determine if the element is in fold.\n     *\n     * @private\n     */\n    private _computeMetrics() {\n        const { top, left, height, width } = this.metrics.bcr;\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n        const metricsStart = this.scrollOrientation === 'vertical' ? top : left;\n        const metricsSize =\n            this.scrollOrientation === 'vertical' ? height : width;\n\n        this.metrics.offsetStart =\n            this.currentScroll + metricsStart - this.translateValue;\n        this.metrics.offsetEnd = this.metrics.offsetStart + metricsSize;\n\n        if (\n            this.metrics.offsetStart < wSize &&\n            !this.attributes.scrollIgnoreFold\n        ) {\n            this.isInFold = true;\n        } else {\n            this.isInFold = false;\n        }\n    }\n\n    /**\n     * Compute intersection values depending on the context.\n     *\n     * @private\n     */\n    private _computeIntersection() {\n        // Window size\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n\n        // Metrics size\n        const metricsSize =\n            this.scrollOrientation === 'vertical'\n                ? this.metrics.bcr.height\n                : this.metrics.bcr.width;\n\n        // Offset\n        const offset = this.attributes.scrollOffset.split(',');\n        const offsetStart = offset[0] != undefined ? offset[0].trim() : '0';\n        const offsetEnd = offset[1] != undefined ? offset[1].trim() : '0';\n\n        // Positions\n        const scrollPosition = this.attributes.scrollPosition.split(',');\n        let scrollPositionStart =\n            scrollPosition[0] != undefined ? scrollPosition[0].trim() : 'start';\n        const scrollPositionEnd =\n            scrollPosition[1] != undefined ? scrollPosition[1].trim() : 'end';\n\n        // Viewport\n        const viewportStart = offsetStart.includes('%')\n            ? wSize * parseInt(offsetStart.replace('%', '').trim()) * 0.01\n            : parseInt(offsetStart);\n        const viewportEnd = offsetEnd.includes('%')\n            ? wSize * parseInt(offsetEnd.replace('%', '').trim()) * 0.01\n            : parseInt(offsetEnd);\n\n        // Fold exception\n        if (this.isInFold) {\n            scrollPositionStart = 'fold';\n        }\n\n        // Define Intersection Start\n        switch (scrollPositionStart) {\n            case 'start':\n                this.intersection.start =\n                    this.metrics.offsetStart - wSize + viewportStart;\n                break;\n\n            case 'middle':\n                this.intersection.start =\n                    this.metrics.offsetStart -\n                    wSize +\n                    viewportStart +\n                    metricsSize * 0.5;\n                break;\n\n            case 'end':\n                this.intersection.start =\n                    this.metrics.offsetStart -\n                    wSize +\n                    viewportStart +\n                    metricsSize;\n                break;\n\n            case 'fold':\n                this.intersection.start = 0;\n                break;\n\n            default:\n                this.intersection.start =\n                    this.metrics.offsetStart - wSize + viewportStart;\n                break;\n        }\n\n        // Define Intersection End\n        switch (scrollPositionEnd) {\n            case 'start':\n                this.intersection.end = this.metrics.offsetStart - viewportEnd;\n                break;\n\n            case 'middle':\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize * 0.5;\n                break;\n\n            case 'end':\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize;\n                break;\n\n            default:\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize;\n                break;\n        }\n\n        // Avoid to have the end < the start intersection >\n        if (this.intersection.end <= this.intersection.start) {\n            switch (scrollPositionEnd) {\n                case 'start':\n                    this.intersection.end = this.intersection.start + 1;\n                    break;\n\n                case 'middle':\n                    this.intersection.end =\n                        this.intersection.start + metricsSize * 0.5;\n                    break;\n\n                case 'end':\n                    this.intersection.end =\n                        this.intersection.start + metricsSize;\n                    break;\n\n                default:\n                    this.intersection.end = this.intersection.start + 1;\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Compute the scroll progress of the element depending\n     * on its intersection values.\n     *\n     * @private\n     *\n     * @param {number} [forcedProgress] - Value to force progress.\n     */\n    private _computeProgress(forcedProgress?: number) {\n        // Progress\n        const progress =\n            forcedProgress ??\n            clamp(\n                0,\n                1,\n                normalize(\n                    this.intersection.start,\n                    this.intersection.end,\n                    this.currentScroll\n                )\n            );\n\n        this.progress = progress;\n\n        if (progress != this.lastProgress) {\n            this.lastProgress = progress;\n\n            // Set the element's progress to the css variable\n            this.attributes.scrollCssProgress && this._setCssProgress(progress);\n\n            // Set the element's progress to the custom event listeners\n            this.attributes.scrollEventProgress &&\n                this._setCustomEventProgress(progress);\n\n            // Set the element's progress to inline modules\n            if (this.attributes.scrollModuleProgress) {\n                for (const modularModules of this.progressModularModules) {\n                    this.modularInstance &&\n                        this.modularInstance.call(\n                            PROGRESS_MODULAR_METHOD,\n                            progress,\n                            modularModules.moduleName,\n                            modularModules.moduleId\n                        );\n                }\n            }\n\n            // Logic to trigger the inview/out of view callbacks\n            progress > 0 && progress < 1 && this.setInview();\n            progress === 0 && this.setOutOfView();\n            progress === 1 && this.setOutOfView();\n        }\n    }\n\n    /**\n     * Set the element's progress to a specific css variable.\n     *\n     * @private\n     *\n     * @param {number} [currentProgress] - Progress value.\n     */\n    _setCssProgress(currentProgress = 0) {\n        this.$el.style.setProperty(\n            PROGRESS_CSS_VAR,\n            currentProgress.toString()\n        );\n    }\n\n    /**\n     * Set the element's progress to the custom event listeners.\n     *\n     * @private\n     *\n     * @param {number} [currentProgress] - Progress value.\n     */\n    _setCustomEventProgress(currentProgress = 0) {\n        const customEventName = this.attributes.scrollEventProgress;\n\n        if (!customEventName) return;\n\n        const customEvent = new CustomEvent(customEventName, {\n            detail: {\n                target: this.$el,\n                progress: currentProgress,\n            },\n        });\n        window.dispatchEvent(customEvent);\n    }\n\n    /**\n     * Get modular modules that can listen the element's progress.\n     *\n     * @private\n     */\n    _getProgressModularModules() {\n        if (!this.modularInstance) {\n            return;\n        }\n\n        const modulesIdNames = Object.keys(this.$el.dataset).filter((key) =>\n            key.includes('module')\n        );\n        const modules: any[] = Object.entries(this.modularInstance.modules);\n\n        if (!modulesIdNames.length) {\n            return;\n        }\n\n        for (const modulesIdName of modulesIdNames) {\n            const moduleId = this.$el.dataset[modulesIdName];\n\n            if (!moduleId) {\n                return;\n            }\n\n            for (const module of modules) {\n                const [moduleName, moduleObj] = module;\n\n                if (moduleId in moduleObj) {\n                    this.progressModularModules.push({\n                        moduleName,\n                        moduleId,\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Function to get scroll call from.\n     *\n     * @private\n     */\n    _getScrollCallFrom(): scrollCallFrom {\n        const closestIntersectionValue = closestNumber(\n            [this.intersection.start, this.intersection.end],\n            this.currentScroll\n        );\n        return this.intersection.start === closestIntersectionValue\n            ? 'start'\n            : 'end';\n    }\n\n    /**\n     * Function to dispatch a custom event or call a modular callback.\n     *\n     * @private\n     *\n     * @param {scrollCallWay} way - Enter or leave.\n     * @param {scrollCallFrom} from - Start or end.\n     */\n    _dispatchCall(way: scrollCallWay, from: scrollCallFrom) {\n        const callParameters = this.attributes.scrollCall?.split(',');\n        const callSelf = this.attributes?.scrollCallSelf;\n\n        if (callParameters && callParameters.length > 1) {\n            // Using Modular.js (https://github.com/modularorg/modularjs)\n            const [func, moduleName, moduleId] = callParameters;\n            let targetModuleId;\n\n            // If the module is set on the scroll element\n            if (callSelf) {\n                targetModuleId = this.$el.dataset[`module${moduleName.trim()}`];\n            } else {\n                targetModuleId = moduleId;\n            }\n\n            this.modularInstance &&\n                this.modularInstance.call(\n                    func.trim(),\n                    {\n                        target: this.$el,\n                        way,\n                        from,\n                    },\n                    moduleName.trim(),\n                    targetModuleId?.trim()\n                );\n        } else if (callParameters) {\n            // Using CustomEvent API (https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent)\n            const [customEventName] = callParameters;\n            const customEvent = new CustomEvent(customEventName, {\n                detail: {\n                    target: this.$el,\n                    way,\n                    from,\n                },\n            });\n            window.dispatchEvent(customEvent);\n        }\n    }\n}\n", "/**\n * Integrates Lenis with Locomotive's built-in animation system\n */\n\nimport type {\n    CoreOptions,\n    IModular,\n    IScrollElementCallbacksValues,\n    scrollOrientation,\n} from '../types';\nimport IO from './IO';\nimport ScrollElement from './ScrollElement';\n\n/** Defined attributes that need a requestAnimationFrame */\nconst ATTRIBUTES_THAT_NEED_RAF = [\n    'scrollOffset',\n    'scrollPosition',\n    'scrollModuleProgress',\n    'scrollCssProgress',\n    'scrollEventProgress',\n    'scrollSpeed',\n];\n\n/** Default root margins */\nconst TRIGGER_ROOT_MARGIN = '-1px -1px -1px -1px';\nconst RAF_ROOT_MARGIN = '100% 100% 100% 100%'; // Add 100vh top/bottom && 100vw left/right to use a biggest value with data-scroll-speed\n\nexport default class Core {\n    private $scrollContainer!: HTMLElement;\n    private modularInstance?: IModular;\n    private triggerRootMargin!: string;\n    private rafRootMargin!: string;\n    private scrollElements!: ScrollElement[];\n    private triggeredScrollElements!: ScrollElement[];\n    private RAFScrollElements!: ScrollElement[];\n    private scrollElementsToUpdate!: ScrollElement[];\n    private IOTriggerInstance!: IO;\n    private IORafInstance!: IO;\n    private scrollOrientation!: scrollOrientation;\n\n    constructor({\n        $el,\n        modularInstance,\n        triggerRootMargin,\n        rafRootMargin,\n        scrollOrientation,\n    }: CoreOptions) {\n        if (!$el) {\n            console.error('Please provide a DOM Element as scrollContainer');\n            return;\n        }\n\n        // Scroll container\n        this.$scrollContainer = $el;\n\n        // Modular.js\n        this.modularInstance = modularInstance;\n\n        // Scroll Direction\n        this.scrollOrientation = scrollOrientation;\n\n        // IO Margins\n        this.triggerRootMargin = triggerRootMargin ?? TRIGGER_ROOT_MARGIN;\n        this.rafRootMargin = rafRootMargin ?? RAF_ROOT_MARGIN;\n\n        // ScrollElements arrays\n        this.scrollElements = [];\n        this.triggeredScrollElements = [];\n        this.RAFScrollElements = [];\n        this.scrollElementsToUpdate = [];\n\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize the core.\n     *\n     * @private\n     */\n    private _init() {\n        const $scrollElements =\n            this.$scrollContainer.querySelectorAll('[data-scroll]');\n\n        const $scrollElementsArr = Array.from($scrollElements) as HTMLElement[]\n        this._subscribeScrollElements($scrollElementsArr);\n\n        // Trigger IO\n        this.IOTriggerInstance = new IO({\n            scrollElements: [...this.triggeredScrollElements],\n            rootMargin: this.triggerRootMargin,\n            IORaf: false,\n        });\n\n        // Raf IO\n        this.IORafInstance = new IO({\n            scrollElements: [...this.RAFScrollElements],\n            rootMargin: this.rafRootMargin,\n            IORaf: true,\n        });\n    }\n\n    /**\n     * Lifecyle - Destroy core.\n     */\n    public destroy() {\n        this.IOTriggerInstance.destroy();\n        this.IORafInstance.destroy();\n        this._unsubscribeAllScrollElements();\n    }\n\n    /**\n     * Callback - Resize callback.\n     */\n    onResize({ currentScroll }: IScrollElementCallbacksValues) {\n        for (const scrollElement of this.RAFScrollElements) {\n            scrollElement.onResize({\n                currentScroll,\n            } as IScrollElementCallbacksValues);\n        }\n    }\n\n    /**\n     * Callback - RAF callback.\n     */\n    onRender({ currentScroll, smooth }: IScrollElementCallbacksValues) {\n        for (const scrollElement of this.scrollElementsToUpdate) {\n            scrollElement.onRender({\n                currentScroll,\n                smooth,\n            } as IScrollElementCallbacksValues);\n        }\n    }\n\n    /**\n     * Remove items from lists of scroll elements and compute all new values.\n     *\n     * @param {HTMLElement} $oldContainer - HTMLElement that contains data-scroll elements to unsubscribe\n     */\n    removeScrollElements($oldContainer: HTMLElement) {\n        const $scrollElementsToRemove =\n            $oldContainer.querySelectorAll('[data-scroll]');\n\n        if (!$scrollElementsToRemove.length) return;\n\n        // 1. Remove from IO\n        for (let index = 0; index < this.triggeredScrollElements.length; index++) {\n            const scrollElement = this.triggeredScrollElements[index];\n            const $scrollElementsToRemoveArr = Array.from($scrollElementsToRemove) as HTMLElement []\n            if ($scrollElementsToRemoveArr.indexOf(scrollElement.$el) > -1) {\n                this.IOTriggerInstance.unobserve(scrollElement.$el);\n                this.triggeredScrollElements.splice(index, 1);\n            }\n        }\n\n        for (let index = 0; index < this.RAFScrollElements.length; index++) {\n            const scrollElement = this.RAFScrollElements[index];\n            const $scrollElementsToRemoveArr = Array.from($scrollElementsToRemove) as HTMLElement []\n            if ($scrollElementsToRemoveArr.indexOf(scrollElement.$el) > -1) {\n                this.IORafInstance.unobserve(scrollElement.$el);\n                this.RAFScrollElements.splice(index, 1);\n            }\n        }\n\n        // 2. Remove from scrollElementsToUpdate[] and scrollElements[]\n        $scrollElementsToRemove.forEach(($scrollElement) => {\n            const targetScrollElementToUpdate =\n                this.scrollElementsToUpdate.find(\n                    (scrollElement) => scrollElement.$el === $scrollElement\n                );\n            const targetScrollElement = this.scrollElements.find(\n                (scrollElement) => scrollElement.$el === $scrollElement\n            );\n\n            if (targetScrollElementToUpdate) {\n                this._unsubscribeElementUpdate(targetScrollElementToUpdate);\n            }\n            if (targetScrollElement) {\n                this.scrollElements = this.scrollElements.filter(\n                    (scrollElementItem) =>\n                        scrollElementItem.id != targetScrollElement.id\n                );\n            }\n        });\n    }\n\n    /**\n     * Add items to lists of scroll elements and compute all new values.\n     *\n     * @param {HTMLElement} $newContainer - HTMLElement that contains data-scroll elements to subscribe\n     */\n    addScrollElements($newContainer: HTMLElement) {\n        // 3. Rebuild ScrollElements\n        const $scrollElements = $newContainer.querySelectorAll('[data-scroll]');\n\n        // 4. Get max scrollElement.id\n        const ids: number[] = [];\n        this.scrollElements.forEach((scrollElement) => {\n            ids.push(scrollElement.id);\n        });\n        const maxID = Math.max(...ids, 0);\n        const fromIndex = maxID + 1;\n        const $scrollElementsArr = Array.from($scrollElements) as HTMLElement[]\n        this._subscribeScrollElements(\n            $scrollElementsArr,\n            fromIndex,\n            true\n        );\n    }\n\n    /**\n     * Create a ScrollElement instance for each elements with\n     * `data-scroll` attribute.\n     *\n     * @private\n     *\n     * @param {HTMLElement[]} $scrollElements - List of elements that need\n     *     to be regarded.\n     */\n    _subscribeScrollElements(\n        $scrollElements: HTMLElement[],\n        fromIndex = 0,\n        toObserve = false\n    ) {\n        // For each scroll element create a ScrollElement instance\n        for (let index = 0; index < $scrollElements.length; index++) {\n            const $scrollElement = $scrollElements[index];\n            const needRaf = this._checkRafNeeded($scrollElement);\n\n            const scrollElementInstance = new ScrollElement({\n                $el: $scrollElement,\n                id: fromIndex + index,\n                scrollOrientation: this.scrollOrientation,\n                modularInstance: this.modularInstance,\n                subscribeElementUpdateFn:\n                    this._subscribeElementUpdate.bind(this),\n                unsubscribeElementUpdateFn:\n                    this._unsubscribeElementUpdate.bind(this),\n                needRaf,\n            });\n\n            // Push to common array\n            this.scrollElements.push(scrollElementInstance);\n\n            // Push to specific array\n            if (needRaf) {\n                this.RAFScrollElements.push(scrollElementInstance);\n\n                // Dynamic observe item\n                if (toObserve) {\n                    this.IORafInstance.scrollElements.push(\n                        scrollElementInstance\n                    );\n                    this.IORafInstance.observe(scrollElementInstance.$el);\n                }\n            } else {\n                this.triggeredScrollElements.push(scrollElementInstance);\n\n                // Dynamic observe item\n                if (toObserve) {\n                    this.IOTriggerInstance.scrollElements.push(\n                        scrollElementInstance\n                    );\n                    this.IOTriggerInstance.observe(scrollElementInstance.$el);\n                }\n            }\n        }\n    }\n\n    /**\n     * Clear all ScrollElement arrays.\n     *\n     * @private\n     */\n    _unsubscribeAllScrollElements() {\n        this.scrollElements = [];\n        this.RAFScrollElements = [];\n        this.triggeredScrollElements = [];\n        this.scrollElementsToUpdate = [];\n    }\n\n    /**\n     * Subscribe ScrollElement instance that needs to be updated.\n     *\n     * @private\n     *\n     * @param {ScrollElement} scrollElement - ScrollElement instance inview\n     *     that needs to be updated.\n     */\n    _subscribeElementUpdate(scrollElement: ScrollElement) {\n        this.scrollElementsToUpdate.push(scrollElement);\n    }\n\n    /**\n     * Unscribe ScrollElement instance that doesn't need to be updated.\n     *\n     * @private\n     *\n     * @param {ScrollElement} scrollElement - The updated ScrollElement instance\n     *     out of view now.\n     */\n    _unsubscribeElementUpdate(scrollElement: ScrollElement) {\n        this.scrollElementsToUpdate = this.scrollElementsToUpdate.filter(\n            (scrollElementToUpdate) =>\n                scrollElementToUpdate.id != scrollElement.id\n        );\n    }\n\n    /**\n     * Check if a DOM Element need a requestAnimationFrame to be used.\n     *\n     * @private\n     *\n     * @param {HTMLElement} $scrollElement - The element that needs to be checked.\n     *\n     * @returns {boolean}\n     */\n    _checkRafNeeded($scrollElement: HTMLElement) {\n        let attributesThatNeedRaf = [...ATTRIBUTES_THAT_NEED_RAF];\n\n        // Remove utils\n        const removeAttribute = (attributeToRemove: string) => {\n            attributesThatNeedRaf = attributesThatNeedRaf.filter(\n                (attribute) => attribute != attributeToRemove\n            );\n        };\n\n        // 1. Check scroll offset values\n        if ($scrollElement.dataset.scrollOffset) {\n            const value = $scrollElement.dataset.scrollOffset\n                .split(',')\n                .map((test) => test.replace('%', '').trim())\n                .join(',');\n            if (value != '0,0') {\n                return true;\n            } else {\n                removeAttribute('scrollOffset');\n            }\n        } else {\n            removeAttribute('scrollOffset');\n        }\n\n        // 2. Check scroll position values\n        if ($scrollElement.dataset.scrollPosition) {\n            const value = $scrollElement.dataset.scrollPosition.trim();\n            if (value != 'top,bottom') {\n                return true;\n            } else {\n                removeAttribute('scrollPosition');\n            }\n        } else {\n            removeAttribute('scrollPosition');\n        }\n\n        // 3. Check scroll speed values\n        if (\n            $scrollElement.dataset.scrollSpeed &&\n            !isNaN(parseFloat($scrollElement.dataset.scrollSpeed))\n        ) {\n            return true;\n        } else {\n            removeAttribute('scrollSpeed');\n        }\n\n        // 4. Check others attributes\n        for (const attribute of attributesThatNeedRaf) {\n            if (attribute in $scrollElement.dataset) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n", "/**\n * Resize Observer\n *\n * The Resize Observer API provides a performant mechanism by which code can monitor an element for changes to its size,\n * with notifications being delivered to the observer each time the size changes.\n *\n * Features functions to:\n *\n * - Trigger the resize callback if the specified element's size change.\n *\n * References:\n *\n * - {@link https://developer.mozilla.org/en-US/docs/Web/API/Resize_Observer_API}\n */\n\nimport type { IROOptions } from '../types';\n\nexport default class RO {\n    private $resizeElements: HTMLElement[];\n    private isFirstObserve: boolean;\n    private observer!: ResizeObserver;\n    private resizeCallback: () => void;\n\n    constructor({ resizeElements, resizeCallback = () => {} }: IROOptions) {\n        // Parameters\n        this.$resizeElements = resizeElements;\n        this.resizeCallback = resizeCallback;\n\n        // Flags\n        this.isFirstObserve = true;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize Resize Observer.\n     *\n     * @private\n     */\n    private _init() {\n        // Callback\n        const onResize = (entries: ResizeObserverEntry[]) => {\n            !this.isFirstObserve && this.resizeCallback?.();\n            this.isFirstObserve = false;\n        };\n\n        // Instance\n        this.observer = new ResizeObserver(onResize);\n\n        // Observe each default elements\n        for (const $resizeElement of this.$resizeElements) {\n            this.observer.observe($resizeElement);\n        }\n    }\n\n    /**\n     * Lifecyle - Destroy Resize Observer.\n     */\n    public destroy() {\n        this.observer.disconnect();\n    }\n}\n", "//@ts-ignore\nimport Lenis from 'lenis';\nimport Core from './core/Core';\nimport RO from './core/RO';\nimport type {\n    ILenisScrollToOptions,\n    ILenisScrollValues,\n    ILocomotiveScrollOptions,\n    IModular,\n    lenisTargetScrollTo,\n} from './types';\nimport type { LenisOptions } from 'lenis';\n\n/**\n * Locomotive Scroll\n *\n * Detection of elements in viewport & smooth scrolling with parallax.\n *\n * Inspired by\n * {@link https://github.com/locomotivemtl/locomotive-scroll locomotive-scroll.js}\n * and built around\n * {@link https://github.com/darkroomengineering/lenis lenis.js}.\n */\n\nexport default class LocomotiveScroll {\n    public rafPlaying: boolean;\n    public lenisInstance: any;\n\n    private coreInstance: any;\n\n    private lenisOptions?: LenisOptions;\n    private modularInstance?: IModular;\n    private triggerRootMargin?: string;\n    private rafRootMargin?: string;\n    private rafInstance?: any;\n    private autoResize?: boolean;\n    private autoStart?: boolean;\n    private ROInstance?: RO;\n    private scrollCallback?(scrollValues: ILenisScrollValues): void;\n    private initCustomTicker?: (render: () => void) => void;\n    private destroyCustomTicker?: (render: () => void) => void;\n    private _onRenderBind: () => void;\n    private _onResizeBind: () => void;\n    private _onScrollToBind: (event: MouseEvent) => void;\n\n    constructor({\n        lenisOptions = {},\n        modularInstance,\n        triggerRootMargin,\n        rafRootMargin,\n        autoResize = true,\n        autoStart = true,\n        scrollCallback = () => {},\n        initCustomTicker,\n        destroyCustomTicker,\n    }: ILocomotiveScrollOptions = {}) {\n\n        for (const [key] of Object.entries(lenisOptions)) {\n            if ([\"wrapper\", \"content\", \"infinite\"].includes(key)) {\n                console.warn(`Warning: Key \"${key}\" is not possible to edit in Locomotive Scroll.`);\n            }\n        }\n\n        // Get arguments\n        Object.assign(this, {\n            lenisOptions,\n            modularInstance,\n            triggerRootMargin,\n            rafRootMargin,\n            autoResize,\n            autoStart,\n            scrollCallback,\n            initCustomTicker,\n            destroyCustomTicker,\n        });\n\n\n        // Binding\n        this._onRenderBind = this._onRender.bind(this);\n        this._onScrollToBind = this._onScrollTo.bind(this);\n        this._onResizeBind = this._onResize.bind(this);\n\n        // Data\n        this.rafPlaying = false;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize instance.\n     *\n     * @private\n     */\n    private _init(): void {\n        // Create Lenis instance\n        this.lenisInstance = new Lenis({\n            ...this.lenisOptions,\n            wrapper: window,\n            content: document.documentElement,\n            infinite: false\n        });\n        this.lenisInstance?.on('scroll', this.scrollCallback);\n\n        // Add scroll direction attribute on body\n        document.documentElement.setAttribute(\n            'data-scroll-orientation',\n            this.lenisInstance.options.orientation\n        );\n\n        requestAnimationFrame(() => {\n            // Create Core Instance\n            this.coreInstance = new Core({\n                $el: this.lenisInstance.rootElement,\n                modularInstance: this.modularInstance,\n                triggerRootMargin: this.triggerRootMargin,\n                rafRootMargin: this.rafRootMargin,\n                scrollOrientation: this.lenisInstance.options.orientation,\n            });\n\n            // Bind Events\n            this._bindEvents();\n\n            // RAF warning\n            if (this.initCustomTicker && !this.destroyCustomTicker) {\n                console.warn(\n                    'initCustomTicker callback is declared, but destroyCustomTicker is not. Please pay attention. It could cause trouble.'\n                );\n            } else if (!this.initCustomTicker && this.destroyCustomTicker) {\n                console.warn(\n                    'destroyCustomTicker callback is declared, but initCustomTicker is not. Please pay attention. It could cause trouble.'\n                );\n            }\n\n            // Start RAF\n            this.autoStart && this.start();\n        });\n    }\n\n    /**\n     * Lifecyle - Destroy instance.\n     */\n    public destroy(): void {\n        // Stop raf\n        this.stop();\n        // Unbind Events\n        this._unbindEvents();\n        // Destroy Lenis\n        this.lenisInstance.destroy();\n        // Destroy Core\n        this.coreInstance?.destroy();\n\n        // Ensure a delay before destroying to handle cases of instant destruction\n        requestAnimationFrame(() => {\n            this.coreInstance?.destroy();\n        });\n    }\n\n    /**\n     * Events - Subscribe events to listen.\n     */\n    private _bindEvents() {\n        this._bindScrollToEvents();\n\n        if (this.autoResize) {\n            if ('ResizeObserver' in window) {\n                this.ROInstance = new RO({\n                    resizeElements: [document.body],\n                    resizeCallback: this._onResizeBind,\n                });\n            } else {\n                (window as any).addEventListener('resize', this._onResizeBind);\n            }\n        }\n    }\n\n    /**\n     * Events - Unsubscribe listened events.\n     */\n    private _unbindEvents() {\n        this._unbindScrollToEvents();\n\n        if (this.autoResize) {\n            if ('ResizeObserver' in window) {\n                this.ROInstance && this.ROInstance.destroy();\n            } else {\n                (window as any).removeEventListener(\n                    'resize',\n                    this._onResizeBind\n                );\n            }\n        }\n    }\n\n    /**\n     * Events - Subscribe scrollTo events to listen.\n     */\n    private _bindScrollToEvents($container?: HTMLElement) {\n        const $rootContainer = $container\n            ? $container\n            : this.lenisInstance.rootElement;\n        const $scrollToElements =\n            $rootContainer?.querySelectorAll('[data-scroll-to]');\n\n        $scrollToElements?.length &&\n            $scrollToElements.forEach(($el: HTMLElement): void => {\n                $el.addEventListener('click', this._onScrollToBind, false);\n            });\n    }\n\n    /**\n     * Events - Unsubscribe scrollTo listened events.\n     */\n    private _unbindScrollToEvents($container?: HTMLElement) {\n        const $rootContainer = $container\n            ? $container\n            : this.lenisInstance.rootElement;\n        const $scrollToElements =\n            $rootContainer?.querySelectorAll('[data-scroll-to]');\n        $scrollToElements?.length &&\n            $scrollToElements.forEach(($el: HTMLElement) => {\n                $el.removeEventListener('click', this._onScrollToBind, false);\n            });\n    }\n\n    /**\n     * Callback - Resize callback.\n     */\n    private _onResize() {\n        // Waiting the next frame to get the new current scroll value return by Lenis\n        requestAnimationFrame(() => {\n            this.coreInstance?.onResize({\n                currentScroll: this.lenisInstance.scroll,\n            });\n        });\n    }\n\n    /**\n     * Callback - Render callback.\n     */\n    private _onRender() {\n        this.lenisInstance?.raf(Date.now());\n\n        this.coreInstance?.onRender({\n            currentScroll: this.lenisInstance.scroll,\n            smooth: this.lenisInstance.options.smoothWheel,\n        });\n    }\n\n    /**\n     * Callback - Scroll To callback.\n     */\n    private _onScrollTo(event: MouseEvent) {\n        event.preventDefault();\n        const $target = (event.currentTarget as HTMLElement) ?? null;\n        if (!$target) return;\n        const target =\n            $target.getAttribute('data-scroll-to-href') ||\n            $target.getAttribute('href');\n        const offset = $target.getAttribute('data-scroll-to-offset') || 0;\n        const duration =\n            $target.getAttribute('data-scroll-to-duration') ||\n            this.lenisInstance.options.duration\n        target &&\n            this.scrollTo(target, {\n                offset: typeof offset === 'string' ? parseInt(offset) : offset,\n                duration:\n                    typeof duration === 'string'\n                        ? parseInt(duration)\n                        : duration,\n            });\n    }\n\n    /**\n     * Start RequestAnimationFrame that active Lenis smooth and scroll progress.\n     */\n    public start(): void {\n        if (this.rafPlaying) {\n            return;\n        }\n\n        // Call lenis start method\n        this.lenisInstance?.start();\n\n        this.rafPlaying = true;\n        this.initCustomTicker\n            ? this.initCustomTicker(this._onRenderBind)\n            : this._raf();\n    }\n\n    /**\n     * Stop RequestAnimationFrame that active Lenis smooth and scroll progress.\n     */\n    public stop(): void {\n        if (!this.rafPlaying) {\n            return;\n        }\n\n        // Call lenis stop method\n        this.lenisInstance?.stop();\n\n        this.rafPlaying = false;\n        this.destroyCustomTicker\n            ? this.destroyCustomTicker(this._onRenderBind)\n            : this.rafInstance && cancelAnimationFrame(this.rafInstance);\n    }\n\n    /**\n     * Remove old scroll elements items and rebuild ScrollElements instances.\n     */\n    public removeScrollElements($oldContainer: HTMLElement): void {\n        if (!$oldContainer) {\n            console.error('Please provide a DOM Element as $oldContainer');\n            return;\n        }\n\n        this._unbindScrollToEvents($oldContainer);\n        this.coreInstance?.removeScrollElements($oldContainer);\n    }\n\n    /**\n     * Add new scroll elements items and rebuild ScrollElements instances.\n     */\n    public addScrollElements($newContainer: HTMLElement): void {\n        if (!$newContainer) {\n            console.error('Please provide a DOM Element as $newContainer');\n            return;\n        }\n\n        this.coreInstance?.addScrollElements($newContainer);\n        requestAnimationFrame(() => {\n            this._bindScrollToEvents($newContainer);\n        });\n    }\n\n    /**\n     * Trigger resize callback.\n     */\n    public resize(): void {\n        this._onResizeBind();\n    }\n\n    /**\n     * Trigger scroll to callback.\n     */\n    public scrollTo(\n        target: lenisTargetScrollTo,\n        options?: ILenisScrollToOptions\n    ): void {\n        this.lenisInstance?.scrollTo(target, {\n            offset: options?.offset,\n            lerp: options?.lerp,\n            duration: options?.duration,\n            immediate: options?.immediate,\n            lock: options?.lock,\n            force: options?.force,\n            easing: options?.easing,\n            onComplete: options?.onComplete,\n        });\n    }\n\n    /**\n     * RequestAnimationFrame that active Lenis smooth and scroll progress.\n     *\n     * @private\n     *\n     */\n    private _raf() {\n        this._onRenderBind();\n        this.rafInstance = requestAnimationFrame(() => this._raf());\n    }\n}\n\nexport * from './types';\n", "import LocomotiveScroll from \"locomotive-scroll\";\n\nexport const locomotiveScroll = new LocomotiveScroll({\n    lenisOptions: {\n        lerp: 0.1,\n        duration: 1.2,\n        orientation: \"vertical\",\n        gestureOrientation: \"vertical\",\n        smoothWheel: true,\n        smoothTouch: false,\n        wheelMultiplier: 1,\n        touchMultiplier: 2,\n        normalizeWheel: true,\n        easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)), // https://www.desmos.com/calculator/brs54l4xou\n    },\n});\n\nexport const lenis = locomotiveScroll.lenisInstance;\n", "import { locomotiveScroll, lenis } from \"./modules/smoothScroll\";\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {});\n"],
  "mappings": "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",
  "names": ["clamp", "min", "input", "max", "Math", "Animate", "constructor", "this", "isRunning", "value", "from", "to", "duration", "currentTime", "deltaTime", "completed", "easing", "linearProgress", "easedProgress", "lerp", "x", "y", "lambda", "dt", "t", "exp", "round", "stop", "_a", "onUpdate", "call", "onStart", "Dimensions", "wrapper", "content", "autoResize", "debounce", "debounceValue", "width", "height", "scrollWidth", "scrollHeight", "resize", "onWrapperResize", "onContentResize", "window", "innerWidth", "innerHeight", "HTMLElement", "clientWidth", "clientHeight", "debouncedResize", "callback", "delay", "timer", "args", "arguments", "context", "clearTimeout", "setTimeout", "apply", "addEventListener", "wrapperResizeObserver", "ResizeObserver", "observe", "contentResizeObserver", "destroy", "disconnect", "_b", "removeEventListener", "limit", "Emitter", "events", "event", "callbacks", "i", "length", "push", "e", "filter", "LINE_HEIGHT", "VirtualScroll", "element", "wheelMultiplier", "touchMultiplier", "lastDelta", "windowWidth", "windowHeight", "onTouchStart", "clientX", "clientY", "targetTouches", "touchStart", "emitter", "emit", "deltaX", "deltaY", "onTouchMove", "_d", "_c", "onTouchEnd", "onWheel", "deltaMode", "onWindowResize", "passive", "on", "Lenis", "document", "documentElement", "wheelEventsTarget", "eventsTarget", "smoothWheel", "syncTouch", "syncTouchLerp", "touchInertiaMultiplier", "pow", "infinite", "orientation", "gestureOrientation", "prevent", "virtualScroll", "__experimental__naiveDimensions", "__isScrolling", "__isStopped", "__isLocked", "userData", "lastVelocity", "velocity", "direction", "onPointerDown", "button", "reset", "onVirtualScroll", "data", "options", "ctrlKey", "isTouch", "type", "includes", "isWheel", "isTouching", "isStopped", "isLocked", "isClick", "isUnknownGesture", "composedPath", "slice", "indexOf", "rootElement", "find", "node", "Element", "hasAttribute", "l", "classList", "contains", "_e", "preventDefault", "isScrolling", "animate", "delta", "abs", "hasTouchInertia", "scrollTo", "targetScroll", "Object", "assign", "programmatic", "onNativeScroll", "__resetVelocityTimeout", "__preventNextNativeScrollEvent", "lastScroll", "animatedScroll", "actualScroll", "sign", "lenisVersion", "body", "dimensions", "updateClassName", "time", "cleanUpClassName", "off", "scroll", "isHorizontal", "scrollLeft", "scrollTop", "start", "advance", "target", "offset", "immediate", "lock", "onComplete", "force", "querySelector", "nodeType", "wrapperRect", "getBoundingClientRect", "left", "top", "rect", "setScroll", "preventNextNativeScrollEvent", "fromTo", "requestAnimationFrame", "n", "d", "progress", "isSmooth", "className", "trim", "replace", "IO", "constructor", "scrollElements", "rootMargin", "IORaf", "this", "observer", "_init", "IntersectionObserver", "entries", "forEach", "entry", "$targetItem", "find", "item", "$el", "target", "isIntersecting", "isAlreadyIntersected", "_setInview", "_setOutOfView", "scrollElement", "observe", "destroy", "disconnect", "$scrollElement", "unobserve", "setInteractivityOn", "setInview", "setInteractivityOff", "setOutOfView", "attributes", "scrollRepeat", "mapRange", "inMin", "inMax", "outMin", "outMax", "value", "closestNumber", "array", "reduce", "prev", "curr", "Math", "abs", "ScrollElement", "id", "modularInstance", "subscribeElementUpdateFn", "unsubscribeElementUpdateFn", "needRaf", "scrollOrientation", "_this$$el$dataset$scr", "_this$$el$dataset$scr2", "_this$$el$dataset$scr3", "_this$$el$dataset$scr4", "_this$$el$dataset$scr5", "intersection", "metrics", "currentScroll", "translateValue", "progress", "lastProgress", "progressModularModules", "isInview", "isInteractive", "isInFold", "isFirstResize", "scrollClass", "dataset", "scrollOffset", "scrollPosition", "scrollModuleProgress", "scrollCssProgress", "scrollEventProgress", "scrollSpeed", "parseFloat", "scrollCall", "scrollCallSelf", "scrollIgnoreFold", "scrollEnableTouchSpeed", "start", "end", "offsetStart", "offsetEnd", "bcr", "window", "scrollY", "scrollX", "_getProgressModularModules", "_resize", "onResize", "onRender", "smooth", "wSize", "innerHeight", "innerWidth", "_computeProgress", "isNaN", "max", "style", "transform", "classList", "add", "from", "_getScrollCallFrom", "_dispatchCall", "remove", "getBoundingClientRect", "_computeMetrics", "_computeIntersection", "top", "left", "height", "width", "metricsSize", "offset", "split", "undefined", "trim", "scrollPositionStart", "scrollPositionEnd", "viewportStart", "includes", "parseInt", "replace", "viewportEnd", "forcedProgress", "_setCssProgress", "_setCustomEventProgress", "modularModules", "call", "moduleName", "moduleId", "currentProgress", "setProperty", "toString", "customEventName", "customEvent", "CustomEvent", "detail", "dispatchEvent", "modulesIdNames", "Object", "keys", "filter", "key", "modules", "length", "modulesIdName", "module", "moduleObj", "push", "closestIntersectionValue", "way", "_this$attributes$scro", "_this$attributes", "callParameters", "callSelf", "_targetModuleId", "func", "targetModuleId", "ATTRIBUTES_THAT_NEED_RAF", "Core", "triggerRootMargin", "rafRootMargin", "$scrollContainer", "triggeredScrollElements", "RAFScrollElements", "scrollElementsToUpdate", "IOTriggerInstance", "IORafInstance", "console", "error", "$scrollElements", "querySelectorAll", "$scrollElementsArr", "Array", "_subscribeScrollElements", "_unsubscribeAllScrollElements", "removeScrollElements", "$oldContainer", "$scrollElementsToRemove", "index", "indexOf", "splice", "targetScrollElementToUpdate", "targetScrollElement", "_unsubscribeElementUpdate", "scrollElementItem", "addScrollElements", "$newContainer", "ids", "fromIndex", "toObserve", "_checkRafNeeded", "scrollElementInstance", "_subscribeElementUpdate", "bind", "scrollElementToUpdate", "attributesThatNeedRaf", "removeAttribute", "attributeToRemove", "attribute", "map", "test", "join", "RO", "resizeElements", "resizeCallback", "$resizeElements", "isFirstObserve", "ResizeObserver", "_this$resizeCallback", "$resizeElement", "LocomotiveScroll", "lenisOptions", "autoResize", "autoStart", "scrollCallback", "initCustomTicker", "destroyCustomTicker", "rafPlaying", "lenisInstance", "coreInstance", "rafInstance", "ROInstance", "_onRenderBind", "_onResizeBind", "_onScrollToBind", "warn", "assign", "_onRender", "_onScrollTo", "_onResize", "_this$lenisInstance", "Lenis", "_extends", "wrapper", "content", "document", "documentElement", "infinite", "on", "setAttribute", "options", "orientation", "requestAnimationFrame", "rootElement", "_bindEvents", "_this$coreInstance", "stop", "_unbindEvents", "_this$coreInstance2", "_bindScrollToEvents", "body", "addEventListener", "_unbindScrollToEvents", "removeEventListener", "$container", "$rootContainer", "$scrollToElements", "_this$coreInstance3", "scroll", "_this$lenisInstance2", "_this$coreInstance4", "raf", "Date", "now", "smoothWheel", "event", "_event$currentTarget", "preventDefault", "$target", "currentTarget", "getAttribute", "duration", "scrollTo", "_this$lenisInstance3", "_raf", "_this$lenisInstance4", "cancelAnimationFrame", "_this$coreInstance5", "_this$coreInstance6", "resize", "_this$lenisInstance5", "lerp", "immediate", "lock", "force", "easing", "onComplete", "locomotiveScroll", "c", "t", "lenis"]
}
